{"version":3,"sources":["clean-blog.js","contact_me.js","jqBootstrapValidation.js","script.js"],"names":["$","on","e","this","toggleClass","target","val","addClass","removeClass","window","width","headerHeight","height","previousTop","currentTop","scrollTop","hasClass","jQuery","jqBootstrapValidation","preventSubmit","submitError","$form","event","errors","submitSuccess","preventDefault","name","email","phone","message","firstName","indexOf","split","slice","join","$this","prop","ajax","url","type","data","cache","success","html","append","trigger","error","text","complete","setTimeout","filter","is","click","tab","focus","createdElements","defaults","options","prependExistingHelpBlock","sniffHtml","semanticallyStrict","autoAdd","helpBlocks","methods","init","settings","extend","uniqueForms","unique","map","parents","toArray","bind","warningsFound","$inputs","find","not","each","i","el","$controlGroup","first","isFunction","$helpBlock","validatorNames","length","push","undefined","attr","max","min","builtInValidators","required","toLowerCase","number","parts","replace","validatorNamesToInspect","newValidatorNamesToInspect","formatValidatorName","i2","el2","validator","shortcut","validators","hasOverrideMessage","foundValidator","validatorTypes","validatorType","validatorTemplate","validatorTemplateType","params","value","getValue","errorsFound","validatorTypeArray","includeEmpty","blockSubmit","submitting","validate","triggerHandler","oldCount","j","original","sort","destroy","unbind","remove","collectErrors","errorMessages","$el","hasErrors","concat","override","newDefaults","callback","validatorName","lastValue","lastValid","lastFinished","rrjqbvValidator","rrjqbvThis","functionName","context","args","Array","prototype","call","arguments","splice","namespaces","func","pop","apply","executeFunctionByName","valid","dataType","failure","regex","inputstring","RegExp","test","negative","match","element","parseFloat","maxlength","minlength","maxchecked","elements","minchecked","validemail","passwordagain","positive","integer","positivenumber","negativenumber","checkone","m","p1","p2","toUpperCase","fn","method","prevScrollpos","pageYOffset","onscroll","currentScrollPos","document","getElementsByClassName","style","top","getElementById","getAttribute"],"mappings":"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","file":"all.js","sourcesContent":["(function($) {\r\n  \"use strict\"; // Start of use strict\r\n\r\n  // Floating label headings for the contact form\r\n  $(\"body\").on(\"input propertychange\", \".floating-label-form-group\", function(e) {\r\n    $(this).toggleClass(\"floating-label-form-group-with-value\", !!$(e.target).val());\r\n  }).on(\"focus\", \".floating-label-form-group\", function() {\r\n    $(this).addClass(\"floating-label-form-group-with-focus\");\r\n  }).on(\"blur\", \".floating-label-form-group\", function() {\r\n    $(this).removeClass(\"floating-label-form-group-with-focus\");\r\n  });\r\n\r\n  // Show the navbar when the page is scrolled up\r\n  var MQL = 992;\r\n\r\n  //primary navigation slide-in effect\r\n  if ($(window).width() > MQL) {\r\n    var headerHeight = $('#mainNav').height();\r\n    $(window).on('scroll', {\r\n        previousTop: 0\r\n      },\r\n      function() {\r\n        var currentTop = $(window).scrollTop();\r\n        //check if user is scrolling up\r\n        if (currentTop < this.previousTop) {\r\n          //if scrolling up...\r\n          if (currentTop > 0 && $('#mainNav').hasClass('is-fixed')) {\r\n            $('#mainNav').addClass('is-visible');\r\n          } else {\r\n            $('#mainNav').removeClass('is-visible is-fixed');\r\n          }\r\n        } else if (currentTop > this.previousTop) {\r\n          //if scrolling down...\r\n          $('#mainNav').removeClass('is-visible');\r\n          if (currentTop > headerHeight && !$('#mainNav').hasClass('is-fixed')) $('#mainNav').addClass('is-fixed');\r\n        }\r\n        this.previousTop = currentTop;\r\n      });\r\n  }\r\n\r\n})(jQuery); // End of use strict\r\n","$(function() {\r\n\r\n  $(\"#contactForm input,#contactForm textarea\").jqBootstrapValidation({\r\n    preventSubmit: true,\r\n    submitError: function($form, event, errors) {\r\n      // additional error messages or events\r\n    },\r\n    submitSuccess: function($form, event) {\r\n      event.preventDefault(); // prevent default submit behaviour\r\n      // get values from FORM\r\n      var name = $(\"input#name\").val();\r\n      var email = $(\"input#email\").val();\r\n      var phone = $(\"input#phone\").val();\r\n      var message = $(\"textarea#message\").val();\r\n      var firstName = name; // For Success/Failure Message\r\n      // Check for white space in name for Success/Fail message\r\n      if (firstName.indexOf(' ') >= 0) {\r\n        firstName = name.split(' ').slice(0, -1).join(' ');\r\n      }\r\n      $this = $(\"#sendMessageButton\");\r\n      $this.prop(\"disabled\", true); // Disable submit button until AJAX call is complete to prevent duplicate messages\r\n      $.ajax({\r\n        url: \"././mail/contact_me.php\",\r\n        type: \"POST\",\r\n        data: {\r\n          name: name,\r\n          phone: phone,\r\n          email: email,\r\n          message: message\r\n        },\r\n        cache: false,\r\n        success: function() {\r\n          // Success message\r\n          $('#success').html(\"<div class='alert alert-success'>\");\r\n          $('#success > .alert-success').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\r\n            .append(\"</button>\");\r\n          $('#success > .alert-success')\r\n            .append(\"<strong>Your message has been sent. </strong>\");\r\n          $('#success > .alert-success')\r\n            .append('</div>');\r\n          //clear all fields\r\n          $('#contactForm').trigger(\"reset\");\r\n        },\r\n        error: function() {\r\n          // Fail message\r\n          $('#success').html(\"<div class='alert alert-danger'>\");\r\n          $('#success > .alert-danger').html(\"<button type='button' class='close' data-dismiss='alert' aria-hidden='true'>&times;\")\r\n            .append(\"</button>\");\r\n          $('#success > .alert-danger').append($(\"<strong>\").text(\"Sorry \" + firstName + \", it seems that my mail server is not responding. Please try again later!\"));\r\n          $('#success > .alert-danger').append('</div>');\r\n          //clear all fields\r\n          $('#contactForm').trigger(\"reset\");\r\n        },\r\n        complete: function() {\r\n          setTimeout(function() {\r\n            $this.prop(\"disabled\", false); // Re-enable submit button when AJAX call is complete\r\n          }, 1000);\r\n        }\r\n      });\r\n    },\r\n    filter: function() {\r\n      return $(this).is(\":visible\");\r\n    },\r\n  });\r\n\r\n  $(\"a[data-toggle=\\\"tab\\\"]\").click(function(e) {\r\n    e.preventDefault();\r\n    $(this).tab(\"show\");\r\n  });\r\n});\r\n\r\n/*When clicking on Full hide fail/success boxes */\r\n$('#name').focus(function() {\r\n  $('#success').html('');\r\n});\r\n","/* jqBootstrapValidation\r\n * A plugin for automating validation on Twitter Bootstrap formatted forms.\r\n *\r\n * v1.3.6\r\n *\r\n * License: MIT <http://opensource.org/licenses/mit-license.php> - see LICENSE file\r\n *\r\n * http://ReactiveRaven.github.com/jqBootstrapValidation/\r\n */\r\n\r\n(function($) {\r\n\r\n  var createdElements = [];\r\n\r\n  var defaults = {\r\n    options: {\r\n      prependExistingHelpBlock: false,\r\n      sniffHtml: true, // sniff for 'required', 'maxlength', etc\r\n      preventSubmit: true, // stop the form submit event from firing if validation fails\r\n      submitError: false, // function called if there is an error when trying to submit\r\n      submitSuccess: false, // function called just before a successful submit event is sent to the server\r\n      semanticallyStrict: false, // set to true to tidy up generated HTML output\r\n      autoAdd: {\r\n        helpBlocks: true\r\n      },\r\n      filter: function() {\r\n        // return $(this).is(\":visible\"); // only validate elements you can see\r\n        return true; // validate everything\r\n      }\r\n    },\r\n    methods: {\r\n      init: function(options) {\r\n\r\n        var settings = $.extend(true, {}, defaults);\r\n\r\n        settings.options = $.extend(true, settings.options, options);\r\n\r\n        var $siblingElements = this;\r\n\r\n        var uniqueForms = $.unique(\r\n          $siblingElements.map(function() {\r\n            return $(this).parents(\"form\")[0];\r\n          }).toArray()\r\n        );\r\n\r\n        $(uniqueForms).bind(\"submit\", function(e) {\r\n          var $form = $(this);\r\n          var warningsFound = 0;\r\n          var $inputs = $form.find(\"input,textarea,select\").not(\"[type=submit],[type=image]\").filter(settings.options.filter);\r\n          $inputs.trigger(\"submit.validation\").trigger(\"validationLostFocus.validation\");\r\n\r\n          $inputs.each(function(i, el) {\r\n            var $this = $(el),\r\n              $controlGroup = $this.parents(\".form-group\").first();\r\n            if (\r\n              $controlGroup.hasClass(\"warning\")\r\n            ) {\r\n              $controlGroup.removeClass(\"warning\").addClass(\"error\");\r\n              warningsFound++;\r\n            }\r\n          });\r\n\r\n          $inputs.trigger(\"validationLostFocus.validation\");\r\n\r\n          if (warningsFound) {\r\n            if (settings.options.preventSubmit) {\r\n              e.preventDefault();\r\n            }\r\n            $form.addClass(\"error\");\r\n            if ($.isFunction(settings.options.submitError)) {\r\n              settings.options.submitError($form, e, $inputs.jqBootstrapValidation(\"collectErrors\", true));\r\n            }\r\n          } else {\r\n            $form.removeClass(\"error\");\r\n            if ($.isFunction(settings.options.submitSuccess)) {\r\n              settings.options.submitSuccess($form, e);\r\n            }\r\n          }\r\n        });\r\n\r\n        return this.each(function() {\r\n\r\n          // Get references to everything we're interested in\r\n          var $this = $(this),\r\n            $controlGroup = $this.parents(\".form-group\").first(),\r\n            $helpBlock = $controlGroup.find(\".help-block\").first(),\r\n            $form = $this.parents(\"form\").first(),\r\n            validatorNames = [];\r\n\r\n          // create message container if not exists\r\n          if (!$helpBlock.length && settings.options.autoAdd && settings.options.autoAdd.helpBlocks) {\r\n            $helpBlock = $('<div class=\"help-block\" />');\r\n            $controlGroup.find('.controls').append($helpBlock);\r\n            createdElements.push($helpBlock[0]);\r\n          }\r\n\r\n          // =============================================================\r\n          //                                     SNIFF HTML FOR VALIDATORS\r\n          // =============================================================\r\n\r\n          // *snort sniff snuffle*\r\n\r\n          if (settings.options.sniffHtml) {\r\n            var message = \"\";\r\n            // ---------------------------------------------------------\r\n            //                                                   PATTERN\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"pattern\") !== undefined) {\r\n              message = \"Not in the expected format<!-- data-validation-pattern-message to override -->\";\r\n              if ($this.data(\"validationPatternMessage\")) {\r\n                message = $this.data(\"validationPatternMessage\");\r\n              }\r\n              $this.data(\"validationPatternMessage\", message);\r\n              $this.data(\"validationPatternRegex\", $this.attr(\"pattern\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                       MAX\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"max\") !== undefined || $this.attr(\"aria-valuemax\") !== undefined) {\r\n              var max = ($this.attr(\"max\") !== undefined ? $this.attr(\"max\") : $this.attr(\"aria-valuemax\"));\r\n              message = \"Too high: Maximum of '\" + max + \"'<!-- data-validation-max-message to override -->\";\r\n              if ($this.data(\"validationMaxMessage\")) {\r\n                message = $this.data(\"validationMaxMessage\");\r\n              }\r\n              $this.data(\"validationMaxMessage\", message);\r\n              $this.data(\"validationMaxMax\", max);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                       MIN\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"min\") !== undefined || $this.attr(\"aria-valuemin\") !== undefined) {\r\n              var min = ($this.attr(\"min\") !== undefined ? $this.attr(\"min\") : $this.attr(\"aria-valuemin\"));\r\n              message = \"Too low: Minimum of '\" + min + \"'<!-- data-validation-min-message to override -->\";\r\n              if ($this.data(\"validationMinMessage\")) {\r\n                message = $this.data(\"validationMinMessage\");\r\n              }\r\n              $this.data(\"validationMinMessage\", message);\r\n              $this.data(\"validationMinMin\", min);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                 MAXLENGTH\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"maxlength\") !== undefined) {\r\n              message = \"Too long: Maximum of '\" + $this.attr(\"maxlength\") + \"' characters<!-- data-validation-maxlength-message to override -->\";\r\n              if ($this.data(\"validationMaxlengthMessage\")) {\r\n                message = $this.data(\"validationMaxlengthMessage\");\r\n              }\r\n              $this.data(\"validationMaxlengthMessage\", message);\r\n              $this.data(\"validationMaxlengthMaxlength\", $this.attr(\"maxlength\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                 MINLENGTH\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"minlength\") !== undefined) {\r\n              message = \"Too short: Minimum of '\" + $this.attr(\"minlength\") + \"' characters<!-- data-validation-minlength-message to override -->\";\r\n              if ($this.data(\"validationMinlengthMessage\")) {\r\n                message = $this.data(\"validationMinlengthMessage\");\r\n              }\r\n              $this.data(\"validationMinlengthMessage\", message);\r\n              $this.data(\"validationMinlengthMinlength\", $this.attr(\"minlength\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                  REQUIRED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"required\") !== undefined || $this.attr(\"aria-required\") !== undefined) {\r\n              message = settings.builtInValidators.required.message;\r\n              if ($this.data(\"validationRequiredMessage\")) {\r\n                message = $this.data(\"validationRequiredMessage\");\r\n              }\r\n              $this.data(\"validationRequiredMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                    NUMBER\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"number\") {\r\n              message = settings.builtInValidators.number.message;\r\n              if ($this.data(\"validationNumberMessage\")) {\r\n                message = $this.data(\"validationNumberMessage\");\r\n              }\r\n              $this.data(\"validationNumberMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                     EMAIL\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"type\") !== undefined && $this.attr(\"type\").toLowerCase() === \"email\") {\r\n              message = \"Not a valid email address<!-- data-validator-validemail-message to override -->\";\r\n              if ($this.data(\"validationValidemailMessage\")) {\r\n                message = $this.data(\"validationValidemailMessage\");\r\n              } else if ($this.data(\"validationEmailMessage\")) {\r\n                message = $this.data(\"validationEmailMessage\");\r\n              }\r\n              $this.data(\"validationValidemailMessage\", message);\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                MINCHECKED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"minchecked\") !== undefined) {\r\n              message = \"Not enough options checked; Minimum of '\" + $this.attr(\"minchecked\") + \"' required<!-- data-validation-minchecked-message to override -->\";\r\n              if ($this.data(\"validationMincheckedMessage\")) {\r\n                message = $this.data(\"validationMincheckedMessage\");\r\n              }\r\n              $this.data(\"validationMincheckedMessage\", message);\r\n              $this.data(\"validationMincheckedMinchecked\", $this.attr(\"minchecked\"));\r\n            }\r\n            // ---------------------------------------------------------\r\n            //                                                MAXCHECKED\r\n            // ---------------------------------------------------------\r\n            if ($this.attr(\"maxchecked\") !== undefined) {\r\n              message = \"Too many options checked; Maximum of '\" + $this.attr(\"maxchecked\") + \"' required<!-- data-validation-maxchecked-message to override -->\";\r\n              if ($this.data(\"validationMaxcheckedMessage\")) {\r\n                message = $this.data(\"validationMaxcheckedMessage\");\r\n              }\r\n              $this.data(\"validationMaxcheckedMessage\", message);\r\n              $this.data(\"validationMaxcheckedMaxchecked\", $this.attr(\"maxchecked\"));\r\n            }\r\n          }\r\n\r\n          // =============================================================\r\n          //                                       COLLECT VALIDATOR NAMES\r\n          // =============================================================\r\n\r\n          // Get named validators\r\n          if ($this.data(\"validation\") !== undefined) {\r\n            validatorNames = $this.data(\"validation\").split(\",\");\r\n          }\r\n\r\n          // Get extra ones defined on the element's data attributes\r\n          $.each($this.data(), function(i, el) {\r\n            var parts = i.replace(/([A-Z])/g, \",$1\").split(\",\");\r\n            if (parts[0] === \"validation\" && parts[1]) {\r\n              validatorNames.push(parts[1]);\r\n            }\r\n          });\r\n\r\n          // =============================================================\r\n          //                                     NORMALISE VALIDATOR NAMES\r\n          // =============================================================\r\n\r\n          var validatorNamesToInspect = validatorNames;\r\n          var newValidatorNamesToInspect = [];\r\n\r\n          do // repeatedly expand 'shortcut' validators into their real validators\r\n          {\r\n            // Uppercase only the first letter of each name\r\n            $.each(validatorNames, function(i, el) {\r\n              validatorNames[i] = formatValidatorName(el);\r\n            });\r\n\r\n            // Remove duplicate validator names\r\n            validatorNames = $.unique(validatorNames);\r\n\r\n            // Pull out the new validator names from each shortcut\r\n            newValidatorNamesToInspect = [];\r\n            $.each(validatorNamesToInspect, function(i, el) {\r\n              if ($this.data(\"validation\" + el + \"Shortcut\") !== undefined) {\r\n                // Are these custom validators?\r\n                // Pull them out!\r\n                $.each($this.data(\"validation\" + el + \"Shortcut\").split(\",\"), function(i2, el2) {\r\n                  newValidatorNamesToInspect.push(el2);\r\n                });\r\n              } else if (settings.builtInValidators[el.toLowerCase()]) {\r\n                // Is this a recognised built-in?\r\n                // Pull it out!\r\n                var validator = settings.builtInValidators[el.toLowerCase()];\r\n                if (validator.type.toLowerCase() === \"shortcut\") {\r\n                  $.each(validator.shortcut.split(\",\"), function(i, el) {\r\n                    el = formatValidatorName(el);\r\n                    newValidatorNamesToInspect.push(el);\r\n                    validatorNames.push(el);\r\n                  });\r\n                }\r\n              }\r\n            });\r\n\r\n            validatorNamesToInspect = newValidatorNamesToInspect;\r\n\r\n          } while (validatorNamesToInspect.length > 0)\r\n\r\n          // =============================================================\r\n          //                                       SET UP VALIDATOR ARRAYS\r\n          // =============================================================\r\n\r\n          var validators = {};\r\n\r\n          $.each(validatorNames, function(i, el) {\r\n            // Set up the 'override' message\r\n            var message = $this.data(\"validation\" + el + \"Message\");\r\n            var hasOverrideMessage = (message !== undefined);\r\n            var foundValidator = false;\r\n            message =\r\n              (\r\n                message ?\r\n                message :\r\n                \"'\" + el + \"' validation failed <!-- Add attribute 'data-validation-\" + el.toLowerCase() + \"-message' to input to change this message -->\"\r\n              );\r\n\r\n            $.each(\r\n              settings.validatorTypes,\r\n              function(validatorType, validatorTemplate) {\r\n                if (validators[validatorType] === undefined) {\r\n                  validators[validatorType] = [];\r\n                }\r\n                if (!foundValidator && $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name)) !== undefined) {\r\n                  validators[validatorType].push(\r\n                    $.extend(\r\n                      true, {\r\n                        name: formatValidatorName(validatorTemplate.name),\r\n                        message: message\r\n                      },\r\n                      validatorTemplate.init($this, el)\r\n                    )\r\n                  );\r\n                  foundValidator = true;\r\n                }\r\n              }\r\n            );\r\n\r\n            if (!foundValidator && settings.builtInValidators[el.toLowerCase()]) {\r\n\r\n              var validator = $.extend(true, {}, settings.builtInValidators[el.toLowerCase()]);\r\n              if (hasOverrideMessage) {\r\n                validator.message = message;\r\n              }\r\n              var validatorType = validator.type.toLowerCase();\r\n\r\n              if (validatorType === \"shortcut\") {\r\n                foundValidator = true;\r\n              } else {\r\n                $.each(\r\n                  settings.validatorTypes,\r\n                  function(validatorTemplateType, validatorTemplate) {\r\n                    if (validators[validatorTemplateType] === undefined) {\r\n                      validators[validatorTemplateType] = [];\r\n                    }\r\n                    if (!foundValidator && validatorType === validatorTemplateType.toLowerCase()) {\r\n                      $this.data(\"validation\" + el + formatValidatorName(validatorTemplate.name), validator[validatorTemplate.name.toLowerCase()]);\r\n                      validators[validatorType].push(\r\n                        $.extend(\r\n                          validator,\r\n                          validatorTemplate.init($this, el)\r\n                        )\r\n                      );\r\n                      foundValidator = true;\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n\r\n            if (!foundValidator) {\r\n              $.error(\"Cannot find validation info for '\" + el + \"'\");\r\n            }\r\n          });\r\n\r\n          // =============================================================\r\n          //                                         STORE FALLBACK VALUES\r\n          // =============================================================\r\n\r\n          $helpBlock.data(\r\n            \"original-contents\",\r\n            (\r\n              $helpBlock.data(\"original-contents\") ?\r\n              $helpBlock.data(\"original-contents\") :\r\n              $helpBlock.html()\r\n            )\r\n          );\r\n\r\n          $helpBlock.data(\r\n            \"original-role\",\r\n            (\r\n              $helpBlock.data(\"original-role\") ?\r\n              $helpBlock.data(\"original-role\") :\r\n              $helpBlock.attr(\"role\")\r\n            )\r\n          );\r\n\r\n          $controlGroup.data(\r\n            \"original-classes\",\r\n            (\r\n              $controlGroup.data(\"original-clases\") ?\r\n              $controlGroup.data(\"original-classes\") :\r\n              $controlGroup.attr(\"class\")\r\n            )\r\n          );\r\n\r\n          $this.data(\r\n            \"original-aria-invalid\",\r\n            (\r\n              $this.data(\"original-aria-invalid\") ?\r\n              $this.data(\"original-aria-invalid\") :\r\n              $this.attr(\"aria-invalid\")\r\n            )\r\n          );\r\n\r\n          // =============================================================\r\n          //                                                    VALIDATION\r\n          // =============================================================\r\n\r\n          $this.bind(\r\n            \"validation.validation\",\r\n            function(event, params) {\r\n\r\n              var value = getValue($this);\r\n\r\n              // Get a list of the errors to apply\r\n              var errorsFound = [];\r\n\r\n              $.each(validators, function(validatorType, validatorTypeArray) {\r\n                if (value || value.length || (params && params.includeEmpty) || (!!settings.validatorTypes[validatorType].blockSubmit && params && !!params.submitting)) {\r\n                  $.each(validatorTypeArray, function(i, validator) {\r\n                    if (settings.validatorTypes[validatorType].validate($this, value, validator)) {\r\n                      errorsFound.push(validator.message);\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n\r\n              return errorsFound;\r\n            }\r\n          );\r\n\r\n          $this.bind(\r\n            \"getValidators.validation\",\r\n            function() {\r\n              return validators;\r\n            }\r\n          );\r\n\r\n          // =============================================================\r\n          //                                             WATCH FOR CHANGES\r\n          // =============================================================\r\n          $this.bind(\r\n            \"submit.validation\",\r\n            function() {\r\n              return $this.triggerHandler(\"change.validation\", {\r\n                submitting: true\r\n              });\r\n            }\r\n          );\r\n          $this.bind(\r\n            [\r\n              \"keyup\",\r\n              \"focus\",\r\n              \"blur\",\r\n              \"click\",\r\n              \"keydown\",\r\n              \"keypress\",\r\n              \"change\"\r\n            ].join(\".validation \") + \".validation\",\r\n            function(e, params) {\r\n\r\n              var value = getValue($this);\r\n\r\n              var errorsFound = [];\r\n\r\n              $controlGroup.find(\"input,textarea,select\").each(function(i, el) {\r\n                var oldCount = errorsFound.length;\r\n                $.each($(el).triggerHandler(\"validation.validation\", params), function(j, message) {\r\n                  errorsFound.push(message);\r\n                });\r\n                if (errorsFound.length > oldCount) {\r\n                  $(el).attr(\"aria-invalid\", \"true\");\r\n                } else {\r\n                  var original = $this.data(\"original-aria-invalid\");\r\n                  $(el).attr(\"aria-invalid\", (original !== undefined ? original : false));\r\n                }\r\n              });\r\n\r\n              $form.find(\"input,select,textarea\").not($this).not(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\").trigger(\"validationLostFocus.validation\");\r\n\r\n              errorsFound = $.unique(errorsFound.sort());\r\n\r\n              // Were there any errors?\r\n              if (errorsFound.length) {\r\n                // Better flag it up as a warning.\r\n                $controlGroup.removeClass(\"success error\").addClass(\"warning\");\r\n\r\n                // How many errors did we find?\r\n                if (settings.options.semanticallyStrict && errorsFound.length === 1) {\r\n                  // Only one? Being strict? Just output it.\r\n                  $helpBlock.html(errorsFound[0] +\r\n                    (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\r\n                } else {\r\n                  // Multiple? Being sloppy? Glue them together into an UL.\r\n                  $helpBlock.html(\"<ul role=\\\"alert\\\"><li>\" + errorsFound.join(\"</li><li>\") + \"</li></ul>\" +\r\n                    (settings.options.prependExistingHelpBlock ? $helpBlock.data(\"original-contents\") : \"\"));\r\n                }\r\n              } else {\r\n                $controlGroup.removeClass(\"warning error success\");\r\n                if (value.length > 0) {\r\n                  $controlGroup.addClass(\"success\");\r\n                }\r\n                $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n              }\r\n\r\n              if (e.type === \"blur\") {\r\n                $controlGroup.removeClass(\"success\");\r\n              }\r\n            }\r\n          );\r\n          $this.bind(\"validationLostFocus.validation\", function() {\r\n            $controlGroup.removeClass(\"success\");\r\n          });\r\n        });\r\n      },\r\n      destroy: function() {\r\n\r\n        return this.each(\r\n          function() {\r\n\r\n            var\r\n              $this = $(this),\r\n              $controlGroup = $this.parents(\".form-group\").first(),\r\n              $helpBlock = $controlGroup.find(\".help-block\").first();\r\n\r\n            // remove our events\r\n            $this.unbind('.validation'); // events are namespaced.\r\n            // reset help text\r\n            $helpBlock.html($helpBlock.data(\"original-contents\"));\r\n            // reset classes\r\n            $controlGroup.attr(\"class\", $controlGroup.data(\"original-classes\"));\r\n            // reset aria\r\n            $this.attr(\"aria-invalid\", $this.data(\"original-aria-invalid\"));\r\n            // reset role\r\n            $helpBlock.attr(\"role\", $this.data(\"original-role\"));\r\n            // remove all elements we created\r\n            if (createdElements.indexOf($helpBlock[0]) > -1) {\r\n              $helpBlock.remove();\r\n            }\r\n\r\n          }\r\n        );\r\n\r\n      },\r\n      collectErrors: function(includeEmpty) {\r\n\r\n        var errorMessages = {};\r\n        this.each(function(i, el) {\r\n          var $el = $(el);\r\n          var name = $el.attr(\"name\");\r\n          var errors = $el.triggerHandler(\"validation.validation\", {\r\n            includeEmpty: true\r\n          });\r\n          errorMessages[name] = $.extend(true, errors, errorMessages[name]);\r\n        });\r\n\r\n        $.each(errorMessages, function(i, el) {\r\n          if (el.length === 0) {\r\n            delete errorMessages[i];\r\n          }\r\n        });\r\n\r\n        return errorMessages;\r\n\r\n      },\r\n      hasErrors: function() {\r\n\r\n        var errorMessages = [];\r\n\r\n        this.each(function(i, el) {\r\n          errorMessages = errorMessages.concat(\r\n            $(el).triggerHandler(\"getValidators.validation\") ? $(el).triggerHandler(\"validation.validation\", {\r\n              submitting: true\r\n            }) : []\r\n          );\r\n        });\r\n\r\n        return (errorMessages.length > 0);\r\n      },\r\n      override: function(newDefaults) {\r\n        defaults = $.extend(true, defaults, newDefaults);\r\n      }\r\n    },\r\n    validatorTypes: {\r\n      callback: {\r\n        name: \"callback\",\r\n        init: function($this, name) {\r\n          return {\r\n            validatorName: name,\r\n            callback: $this.data(\"validation\" + name + \"Callback\"),\r\n            lastValue: $this.val(),\r\n            lastValid: true,\r\n            lastFinished: true\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          if (validator.lastValue === value && validator.lastFinished) {\r\n            return !validator.lastValid;\r\n          }\r\n\r\n          if (validator.lastFinished === true) {\r\n            validator.lastValue = value;\r\n            validator.lastValid = true;\r\n            validator.lastFinished = false;\r\n\r\n            var rrjqbvValidator = validator;\r\n            var rrjqbvThis = $this;\r\n            executeFunctionByName(\r\n              validator.callback,\r\n              window,\r\n              $this,\r\n              value,\r\n              function(data) {\r\n                if (rrjqbvValidator.lastValue === data.value) {\r\n                  rrjqbvValidator.lastValid = data.valid;\r\n                  if (data.message) {\r\n                    rrjqbvValidator.message = data.message;\r\n                  }\r\n                  rrjqbvValidator.lastFinished = true;\r\n                  rrjqbvThis.data(\"validation\" + rrjqbvValidator.validatorName + \"Message\", rrjqbvValidator.message);\r\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                  setTimeout(function() {\r\n                    rrjqbvThis.trigger(\"change.validation\");\r\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                }\r\n              }\r\n            );\r\n          }\r\n\r\n          return false;\r\n\r\n        }\r\n      },\r\n      ajax: {\r\n        name: \"ajax\",\r\n        init: function($this, name) {\r\n          return {\r\n            validatorName: name,\r\n            url: $this.data(\"validation\" + name + \"Ajax\"),\r\n            lastValue: $this.val(),\r\n            lastValid: true,\r\n            lastFinished: true\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          if (\"\" + validator.lastValue === \"\" + value && validator.lastFinished === true) {\r\n            return validator.lastValid === false;\r\n          }\r\n\r\n          if (validator.lastFinished === true) {\r\n            validator.lastValue = value;\r\n            validator.lastValid = true;\r\n            validator.lastFinished = false;\r\n            $.ajax({\r\n              url: validator.url,\r\n              data: \"value=\" + value + \"&field=\" + $this.attr(\"name\"),\r\n              dataType: \"json\",\r\n              success: function(data) {\r\n                if (\"\" + validator.lastValue === \"\" + data.value) {\r\n                  validator.lastValid = !!(data.valid);\r\n                  if (data.message) {\r\n                    validator.message = data.message;\r\n                  }\r\n                  validator.lastFinished = true;\r\n                  $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                  // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                  setTimeout(function() {\r\n                    $this.trigger(\"change.validation\");\r\n                  }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n                }\r\n              },\r\n              failure: function() {\r\n                validator.lastValid = true;\r\n                validator.message = \"ajax call failed\";\r\n                validator.lastFinished = true;\r\n                $this.data(\"validation\" + validator.validatorName + \"Message\", validator.message);\r\n                // Timeout is set to avoid problems with the events being considered 'already fired'\r\n                setTimeout(function() {\r\n                  $this.trigger(\"change.validation\");\r\n                }, 1); // doesn't need a long timeout, just long enough for the event bubble to burst\r\n              }\r\n            });\r\n          }\r\n\r\n          return false;\r\n\r\n        }\r\n      },\r\n      regex: {\r\n        name: \"regex\",\r\n        init: function($this, name) {\r\n          return {\r\n            regex: regexFromString($this.data(\"validation\" + name + \"Regex\"))\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (!validator.regex.test(value) && !validator.negative) ||\r\n            (validator.regex.test(value) && validator.negative);\r\n        }\r\n      },\r\n      required: {\r\n        name: \"required\",\r\n        init: function($this, name) {\r\n          return {};\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return !!(value.length === 0 && !validator.negative) ||\r\n            !!(value.length > 0 && validator.negative);\r\n        },\r\n        blockSubmit: true\r\n      },\r\n      match: {\r\n        name: \"match\",\r\n        init: function($this, name) {\r\n          var element = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.data(\"validation\" + name + \"Match\") + \"\\\"]\").first();\r\n          element.bind(\"validation.validation\", function() {\r\n            $this.trigger(\"change.validation\", {\r\n              submitting: true\r\n            });\r\n          });\r\n          return {\r\n            \"element\": element\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (value !== validator.element.val() && !validator.negative) ||\r\n            (value === validator.element.val() && validator.negative);\r\n        },\r\n        blockSubmit: true\r\n      },\r\n      max: {\r\n        name: \"max\",\r\n        init: function($this, name) {\r\n          return {\r\n            max: $this.data(\"validation\" + name + \"Max\")\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (parseFloat(value, 10) > parseFloat(validator.max, 10) && !validator.negative) ||\r\n            (parseFloat(value, 10) <= parseFloat(validator.max, 10) && validator.negative);\r\n        }\r\n      },\r\n      min: {\r\n        name: \"min\",\r\n        init: function($this, name) {\r\n          return {\r\n            min: $this.data(\"validation\" + name + \"Min\")\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (parseFloat(value) < parseFloat(validator.min) && !validator.negative) ||\r\n            (parseFloat(value) >= parseFloat(validator.min) && validator.negative);\r\n        }\r\n      },\r\n      maxlength: {\r\n        name: \"maxlength\",\r\n        init: function($this, name) {\r\n          return {\r\n            maxlength: $this.data(\"validation\" + name + \"Maxlength\")\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return ((value.length > validator.maxlength) && !validator.negative) ||\r\n            ((value.length <= validator.maxlength) && validator.negative);\r\n        }\r\n      },\r\n      minlength: {\r\n        name: \"minlength\",\r\n        init: function($this, name) {\r\n          return {\r\n            minlength: $this.data(\"validation\" + name + \"Minlength\")\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return ((value.length < validator.minlength) && !validator.negative) ||\r\n            ((value.length >= validator.minlength) && validator.negative);\r\n        }\r\n      },\r\n      maxchecked: {\r\n        name: \"maxchecked\",\r\n        init: function($this, name) {\r\n          var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n          elements.bind(\"click.validation\", function() {\r\n            $this.trigger(\"change.validation\", {\r\n              includeEmpty: true\r\n            });\r\n          });\r\n          return {\r\n            maxchecked: $this.data(\"validation\" + name + \"Maxchecked\"),\r\n            elements: elements\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (validator.elements.filter(\":checked\").length > validator.maxchecked && !validator.negative) ||\r\n            (validator.elements.filter(\":checked\").length <= validator.maxchecked && validator.negative);\r\n        },\r\n        blockSubmit: true\r\n      },\r\n      minchecked: {\r\n        name: \"minchecked\",\r\n        init: function($this, name) {\r\n          var elements = $this.parents(\"form\").first().find(\"[name=\\\"\" + $this.attr(\"name\") + \"\\\"]\");\r\n          elements.bind(\"click.validation\", function() {\r\n            $this.trigger(\"change.validation\", {\r\n              includeEmpty: true\r\n            });\r\n          });\r\n          return {\r\n            minchecked: $this.data(\"validation\" + name + \"Minchecked\"),\r\n            elements: elements\r\n          };\r\n        },\r\n        validate: function($this, value, validator) {\r\n          return (validator.elements.filter(\":checked\").length < validator.minchecked && !validator.negative) ||\r\n            (validator.elements.filter(\":checked\").length >= validator.minchecked && validator.negative);\r\n        },\r\n        blockSubmit: true\r\n      }\r\n    },\r\n    builtInValidators: {\r\n      email: {\r\n        name: \"Email\",\r\n        type: \"shortcut\",\r\n        shortcut: \"validemail\"\r\n      },\r\n      validemail: {\r\n        name: \"Validemail\",\r\n        type: \"regex\",\r\n        regex: \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\\\.[A-Za-z]{2,4}\",\r\n        message: \"Not a valid email address<!-- data-validator-validemail-message to override -->\"\r\n      },\r\n      passwordagain: {\r\n        name: \"Passwordagain\",\r\n        type: \"match\",\r\n        match: \"password\",\r\n        message: \"Does not match the given password<!-- data-validator-paswordagain-message to override -->\"\r\n      },\r\n      positive: {\r\n        name: \"Positive\",\r\n        type: \"shortcut\",\r\n        shortcut: \"number,positivenumber\"\r\n      },\r\n      negative: {\r\n        name: \"Negative\",\r\n        type: \"shortcut\",\r\n        shortcut: \"number,negativenumber\"\r\n      },\r\n      number: {\r\n        name: \"Number\",\r\n        type: \"regex\",\r\n        regex: \"([+-]?\\\\\\d+(\\\\\\.\\\\\\d*)?([eE][+-]?[0-9]+)?)?\",\r\n        message: \"Must be a number<!-- data-validator-number-message to override -->\"\r\n      },\r\n      integer: {\r\n        name: \"Integer\",\r\n        type: \"regex\",\r\n        regex: \"[+-]?\\\\\\d+\",\r\n        message: \"No decimal places allowed<!-- data-validator-integer-message to override -->\"\r\n      },\r\n      positivenumber: {\r\n        name: \"Positivenumber\",\r\n        type: \"min\",\r\n        min: 0,\r\n        message: \"Must be a positive number<!-- data-validator-positivenumber-message to override -->\"\r\n      },\r\n      negativenumber: {\r\n        name: \"Negativenumber\",\r\n        type: \"max\",\r\n        max: 0,\r\n        message: \"Must be a negative number<!-- data-validator-negativenumber-message to override -->\"\r\n      },\r\n      required: {\r\n        name: \"Required\",\r\n        type: \"required\",\r\n        message: \"This is required<!-- data-validator-required-message to override -->\"\r\n      },\r\n      checkone: {\r\n        name: \"Checkone\",\r\n        type: \"minchecked\",\r\n        minchecked: 1,\r\n        message: \"Check at least one option<!-- data-validation-checkone-message to override -->\"\r\n      }\r\n    }\r\n  };\r\n\r\n  var formatValidatorName = function(name) {\r\n    return name\r\n      .toLowerCase()\r\n      .replace(\r\n        /(^|\\s)([a-z])/g,\r\n        function(m, p1, p2) {\r\n          return p1 + p2.toUpperCase();\r\n        }\r\n      );\r\n  };\r\n\r\n  var getValue = function($this) {\r\n    // Extract the value we're talking about\r\n    var value = $this.val();\r\n    var type = $this.attr(\"type\");\r\n    if (type === \"checkbox\") {\r\n      value = ($this.is(\":checked\") ? value : \"\");\r\n    }\r\n    if (type === \"radio\") {\r\n      value = ($('input[name=\"' + $this.attr(\"name\") + '\"]:checked').length > 0 ? value : \"\");\r\n    }\r\n    return value;\r\n  };\r\n\r\n  function regexFromString(inputstring) {\r\n    return new RegExp(\"^\" + inputstring + \"$\");\r\n  }\r\n\r\n  /**\r\n   * Thanks to Jason Bunting via StackOverflow.com\r\n   *\r\n   * http://stackoverflow.com/questions/359788/how-to-execute-a-javascript-function-when-i-have-its-name-as-a-string#answer-359910\r\n   * Short link: http://tinyurl.com/executeFunctionByName\r\n   **/\r\n  function executeFunctionByName(functionName, context /*, args*/ ) {\r\n    var args = Array.prototype.slice.call(arguments).splice(2);\r\n    var namespaces = functionName.split(\".\");\r\n    var func = namespaces.pop();\r\n    for (var i = 0; i < namespaces.length; i++) {\r\n      context = context[namespaces[i]];\r\n    }\r\n    return context[func].apply(this, args);\r\n  }\r\n\r\n  $.fn.jqBootstrapValidation = function(method) {\r\n\r\n    if (defaults.methods[method]) {\r\n      return defaults.methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n    } else if (typeof method === 'object' || !method) {\r\n      return defaults.methods.init.apply(this, arguments);\r\n    } else {\r\n      $.error('Method ' + method + ' does not exist on jQuery.jqBootstrapValidation');\r\n      return null;\r\n    }\r\n\r\n  };\r\n\r\n  $.jqBootstrapValidation = function(options) {\r\n    $(\":input\").not(\"[type=image],[type=submit]\").jqBootstrapValidation.apply(this, arguments);\r\n  };\r\n\r\n})(jQuery);\r\n","/* When the user scrolls down, hide the navbar. When the user scrolls up, show the navbar */\r\nvar prevScrollpos = window.pageYOffset;\r\n\r\nwindow.onscroll = function() {\r\n  var currentScrollPos = window.pageYOffset;\r\n  if (prevScrollpos > currentScrollPos) {\r\n    document.getElementsByClassName(\"navbar\")[0].style.top = \"0\";\r\n  } else {\r\n\r\n    if(document.getElementById(\"toggle-nav\").getAttribute(\"aria-expanded\") == \"true\"){\r\n        document.getElementById(\"toggle-nav\").click();\r\n    }\r\n    \r\n    document.getElementsByClassName(\"navbar\")[0].style.top = \"-70px\";\r\n    if(currentScrollPos <= 0){\r\n      document.getElementsByClassName(\"navbar\")[0].style.top = \"0\";\r\n    }\r\n  }\r\n  prevScrollpos = currentScrollPos;\r\n}\r\n"]}